{
    "Информатика": {
        "title": "Информатика",
        "extract": "Информа́тика (фр. informatique; англ. computer science) — наука о методах и процессах сбора, хранения, обработки, передачи, анализа и оценки информации с применением компьютерных технологий, обеспечивающих возможность её использования для принятия решений.\nИнформатика включает дисциплины, относящиеся к обработке информации в вычислительных машинах и вычислительных сетях: как абстрактные, вроде анализа алгоритмов, так и конкретные, например, разработка языков программирования и протоколов передачи данных.\nТемами исследований в информатике являются вопросы: что можно, а что нельзя реализовать в программах и базах данных (теория вычислимости и искусственный интеллект), каким образом можно решать специфические вычислительные и информационные задачи с максимальной эффективностью (теория сложности вычислений), в каком виде следует хранить и восстанавливать информацию специфического вида (структуры и базы данных), как программы и люди должны взаимодействовать друг с другом (пользовательский интерфейс и языки программирования и представление знаний) и т. п.\n\n\n== Этимология и значение слова ==\nТермин нем. Informatik ввёл немецкий специалист Карл Штейнбух в статье Informatik: Automatische Informationsverarbeitung (Информатика: Автоматическая обработка информации) 1957 года.\nТермин «Computer science» («Компьютерная наука») появился в 1959 году в научном журнале Communications of the ACM, в котором Луи Фейн (Louis Fein) выступал за создание Graduate School in Computer Sciences (Высшей школы в области информатики) аналогичной Гарвардской бизнес-школе, созданной в 1921 году[уточнить]. Обосновывая такое название школы, Луи Фейн ссылался на Management science («Наука управления»), которая, так же как и информатика, имеет прикладной и междисциплинарный характер, при этом имеет признаки характерные для научной дисциплины. Усилия Луи Фейна, численного аналитика Джорджа Форсайта и других увенчались успехом: университеты пошли на создание программ, связанных с информатикой, начиная с Университета Пердью в 1962-м.\nФранцузский термин «informatique» введён в 1962 году Филиппом Дрейфусом, который также предложил перевод на ряд других европейских языков.\nТермины «информология» и «информатика» предложены в 1962 году членом-корреспондентом АН СССР Александром Харкевичем. Основы информатики как науки были изложены в книге «Основы научной информации» 1965 года, которая была переиздана в 1968 году, под названием «Основы информатики».\nНесмотря на своё англоязычное название (англ. Computer Science — компьютерная наука), большая часть научных направлений, связанных с информатикой, не включает изучение самих компьютеров. Вследствие этого были предложены несколько альтернативных названий. Некоторые факультеты крупных университетов предпочитают термин вычислительная наука (computing science), чтобы подчеркнуть разницу между терминами. Датский учёный Питер Наур предложил термин даталогия (datalogy), чтобы отразить тот факт, что научная дисциплина оперирует данными и занимается обработкой данных, хотя и не обязательно с применением компьютеров.\nПервым научным учреждением, включившим в название этот термин, был Департамент Даталогии в Университете Копенгагена, основанный в 1969 году, где работал Питер Наур, ставший первым профессором в даталогии. Этот термин используется в основном в скандинавских странах. В остальной же Европе часто используются термины, производные от сокращённого перевода фраз «автоматическая информация» (англ. automatic information) (к примеру informazione automatica по-итальянски) и «информация и математика» (information and mathematics), например, informatique (Франция), Informatik (Германия), informatica (Италия, Нидерланды), informática (Испания, Португалия), informatika (в славянских языках) или pliroforiki (πληροφορική, что означает информатика) — в Греции. Подобные слова также были приняты в Великобритании, например, Школа информатики в Университете Эдинбурга.\nВ русском, английском, французском и немецком языках в 1960-х годах была тенденция к замене термина «документация» терминами, имеющими в своей основе слово «информация». В русском языке производной от термина «документация» стала документалистика и получили распространение термины научная и научно-техническая информация.\nВо Франции термин официально вошёл в употребление в 1966 году. В немецком языке термин Informatik имел вначале двойственное значение. Так, в ФРГ и Великобритании он был в значении «computer science», то есть означал всё, что связано с применением ЭВМ, а в ГДР, как и в основном по Европе, обозначал науку по французской и русской модели.\n\n\n=== Эквиваленты в английском языке ===\nСчитается, что под терминами «informatics» в европейских странах и «информатика» в русском языке понимается направление, именуемое в английском языке «computer science». К другому направлению, посвящённому изучению структуры и общих свойств объективной (научной) информации, иногда называемому документалистикой (документальной информатикой) или автоматическим анализом документов, близок термин «information science».\nПринято считать, что в английский язык термин «informatics» независимо от остальных ввёл Уолтер Ф. Бауэр, основатель «Informatics Inc.». В США в настоящее время термин англ. informatics связан с прикладными вычислениями или обработкой данных в контексте другой области, например в биоинформатике («bioinformatics») и геоинформатике («geoinformatics»).\nВо многих словарях informatics и computer science приравниваются к информатике. В тезаурусе ЮНЕСКО «Информатика — Informatics» даётся как синоним к переводу «Computer science — Компьютерные науки».\n\n\n=== Полисемия ===\nРяд учёных (специалистов в области информатики) утверждали, что в информатике существуют три отдельные парадигмы. Например, Питер Вегнер выделял науку, технологию и математику. Рабочая группа Питера Деннинга утверждала, что это теория, абстракция (моделирование) и дизайн. Амнон Х. Эден описывал эти парадигмы, как:\n\nрационалистическую парадигму, где информатика — это раздел математики, математика доминирует в теоретической информатике и в основном использует логический вывод,\nтехнократическую парадигму, используемую в инженерных подходах, наиболее важных в программной инженерии,\nи научную парадигму, где информатика — это ветвь естественных (эмпирических) наук, но информатика отличается тем, что в ней эксперименты проводятся над искусственными объектами (программами и компьютерами).\n\n\n=== Полисемия в русском языке ===\nВ разные периоды развития информатики в СССР и России в понятие «информатика» вкладывался различный смысл. Информатика — это:\n\nТеория научно-информационной деятельности. В рамках библиотечного дела под термином «научно-информационная деятельность» понимается «практическая работа по сбору, аналитико-синтетической переработке, хранению, поиску и предоставлению учёным и специалистам закрепленной в документах научной информации». В 1952 г. в Москве был создан Институт научной информации Академии наук (переименованный позднее в ВИНИТИ). Цели его создания были более широкими, чем выполнение «научно-информационной деятельности» и А. А. Харкевич (директор Института проблем передачи информации АН СССР) предложил в письме А. И. Михайлову (директору ВИНИТИ) новое название: «„информология“ или „информатика“ („информация“ плюс „автоматика“)» . Третье издание «Большой советской энциклопедии» (1970-е гг.) фиксирует значение информатики как дисциплины, изучающей «структуру и общие свойства научной информации, а также закономерности её создания, преобразования, передачи и использования в различных сферах человеческой деятельности».\nНаука о вычислительных машинах и их применении (вычислительная техника и программирование). В 1976 г. профессора́ Мюнхенского технического университета Ф. Л. Бауэр и Г. Гооз написали книгу «Информатика. Вводный курс», переведённую в том же году В. К. Сабельфельдом, учеником известного советского учёного Андрея Петровича Ершова, на русский язык. Они перевели «Informatik» словом «информатика» и определили как «науку, занимающуюся разработкой теории программирования и применения ЭВМ». Термин «Informatik» Ф. Л. Бауэр и Г. Гооз объясняют как «немецкое название для computer science — области знания, которая сложилась в самостоятельную научную дисциплину в шестидесятые годы, прежде всего в США, а также в Великобритании. … В английском языке, по-видимому, останется „computer science“ (вычислительная наука), причем этот термин имеет уклон в область теории».\nФундаментальная наука об информационных процессах в природе, обществе и технических системах. В начале 1990-х гг. К. К. Колин (заместитель директора Института проблем информатики АН СССР) синтезировал толкования информатики, данные академиками А. П. Ершовым и Б. Н. Наумовым, а также проф. Ю. И. Шемакиным следующим образом: информатика — это наука «о свойствах, законах, методах и средствах формирования, преобразования и распространения информации в природе и обществе, в том числе при помощи технических систем». Предметная область информатики, по Колину, включает такие разделы: (1) теоретическая информатика; (2) техническая информатика; (3) социальная информатика, (4) биологическая информатика и (5) физическая информатика.\nПолагают, что одновременное существование всех трёх значений у слова «информатика» затрудняет и мешает развитию данного научного направления.\n\n\n== История ==\n\nСамые ранние основы того, что впоследствии станет информатикой, предшествуют изобретению современного цифрового компьютера. Машины для расчёта нескольких арифметических задач, такие как счёты, существовали с древности, помогая в таких вычислениях как умножение и деление.\nБлез Паскаль спроектировал и собрал первый рабочий механический калькулятор, известный как калькулятор Паскаля, в 1642.\nВ 1673 году Готфрид Лейбниц продемонстрировал механический калькулятор (арифмометр), названный «Stepped Reckoner».\nЕго можно считать первым учёным в области компьютерных наук и специалистом в области теории информации, поскольку, среди прочего, он ещё описал двоичную (бинарную) систему чисел.\nВ 1820 году Томас де Кольмар запустил промышленный выпуск механического калькулятора после того, как он создал свой упрощённый арифмометр, который был первой счётной машиной, достаточно прочной и надёжной для ежедневного использования. Чарльз Бэббидж начал проектирование первого автоматического механического калькулятора, его разностной машины, в 1822, что в конечном счёте подало ему идею первого программируемого механического калькулятора, его аналитической машины.\nОн начал работу над этой машиной в 1834 году и менее чем за два года были сформулированы многие из основных черт современного компьютера. Важнейшим шагом стало использование перфокарт, сработанных на Жаккардовском ткацком станке , что открывало бесконечные просторы для программирования . В 1843 году во время перевода французской статьи на аналитической машине Ада Лавлейс написала в одной из её многочисленных записок алгоритм для вычисления чисел Бернулли, который считается первой компьютерной программой .\nОколо 1885 года Герман Холлерит изобрёл табулятор, который использовал перфокарты для обработки статистической информации; в конечном итоге его компания стала частью IBM. В 1937 году, спустя сто лет после несбыточной мечты Бэббиджа, Говард Эйкен убедил руководство IBM, производившей все виды оборудования для перфорированных карт и вовлечённой в бизнес по созданию калькуляторов, разработать свой гигантский программируемый калькулятор ASCC/Harvard Mark I, основанный на аналитической машине Бэббиджа, которая, в свою очередь, использовала перфокарты и центральный вычислитель (central computing unit).\nПро готовую машину поговаривали: «мечта Бэббиджа сбылась».\nВ 1940-х с появлением новых и более мощных вычислительных машин термин компьютер стал обозначать эти машины, а не людей, занимающихся вычислениями (теперь слово «computer» в этом значении употребляется редко). Когда стало ясно, что компьютеры можно использовать не только для математических расчётов, область исследований информатики расширилась с тем, чтобы изучать вычисления в целом. Информатика получила статус самостоятельной научной дисциплины в 1950-х и начале 1960-х годов . Первая в мире степень по информатике, Диплом Кэмбриджа по информатике, была присвоена в компьютерной лаборатории Кембриджского университета в 1953 году. Первая подобная учебная программа в США появилась в Университете Пердью в 1962 году. С распространением компьютеров возникло много новых самодостаточных научных направлений, основанных на вычислениях с помощью компьютеров.\nМало кто изначально мог предположить, что сами компьютеры станут предметом научных исследований, но в конце 1950-х годов это мнение распространилось среди большинства учёных . Ныне известный бренд IBM в то время был одним из участников революции в информатике. IBM (сокращение от International Business Machines) выпустила компьютеры IBM 704 и позже — IBM 709, которые уже широко использовались одновременно с изучением и апробацией этих устройств. «Тем не менее работа с (компьютером) IBM была полна разочарований… при ошибке в одной букве одной инструкции программа „падала“ и приходилось начинать всё сначала». В конце 1950-х годов информатика как дисциплина ещё только становилась, и такие проблемы были обычным явлением.\nСо временем был достигнут значительный прогресс в удобстве использования и эффективности вычислительной техники. В современном обществе наблюдается явный переход среди пользователей компьютерной техники: от её использования только экспертами и специалистами к использованию всеми и каждым. Изначально компьютеры были весьма дорогостоящими и чтобы их эффективно использовать нужна была помощь специалистов. Когда компьютеры стали более распространёнными и доступными, тогда для решения обычных задач стало требоваться меньше помощи специалистов.\n\n\n=== История информатики в СССР ===\n\nВ 1985 году в СССР был создан НИИ информатики и вычислительной техники. В том же 1985 году в школах была введена учебная дисциплина «Информатика» и издан первый учебник — «Основы информатики и вычислительной техники» А. П. Ершова.\n4 декабря отмечается День российской информатики, так как в этот день в 1948 году Государственный комитет Совета министров СССР по внедрению передовой техники в народное хозяйство зарегистрировал за номером 10 475 изобретение И. С. Брука и Б. И. Рамеева — цифровую электронную вычислительную машину M-1.\n\n\n=== Основные достижения ===\n\nНесмотря на короткую историю в качестве официальной научной дисциплины, информатика внесла фундаментальный вклад в науку и общество. По сути, информатика, наряду с электроникой, является одной из основополагающих наук текущей эпохи человеческой истории, называемой информационной эпохой. При этом информатика является предводителем информационной революции и третьим крупным шагом в развитии технологий, после промышленной революции (1750—1850 н. э.) и неолитической революции (8000-5000 до н. э.).\nВклад информатики:\n\nНачало «цифровой революции», включающей информационную эпоху и интернет.\nДано формальное определение вычислений и вычислимости, и доказательство того, что существуют алгоритмически неразрешимые задачи.\nВведено понятие языка программирования, то есть средства для точного выражения методологической информации на различных уровнях абстракции.\nРазвитие криптографии и криптоанализа.\nВычислительные методы обеспечили возможность практической оценки процессов и ситуаций большой сложности, а также возможность проведения экспериментов исключительно за счёт программного обеспечения. Появилась возможность углубленного изучения разума и картирования генома человека, благодаря проекту «Геном человека». Проекты распределенных вычислений, такие как Folding@Home, исследуют сворачивание молекул белка.\nАлгоритмическая торговля повысила эффективность и ликвидность финансовых рынков с помощью искусственного интеллекта, машинного обучения и других статистических и численных методов на больших диапазонах данных . Частое использование алгоритмической торговли может усугубить волатильность.\nКомпьютерная графика и CGI повсеместно используются в современных развлечениях, особенно в области телевидения, кино, рекламы, анимации и видео-игр. Даже фильмы, в которых нет (явного) использования CGI, как правило, сняты на цифровые камеры и впоследствии обработаны или отредактированы в программах обработки видео.\nМоделирование различных процессов, например в гидродинамике, физике, электрике, электронных системах и цепях, а также для моделирования общества и социальных ситуаций (в частности, военных игр), учитывая среду обитания и др. Современные компьютеры позволяют оптимизировать, например, такие конструкции, как проект целого самолёта. Известным программным обеспечением является симулятор электронных схем SPICE, а также программное обеспечение для физической реализации новых (или модифицированных) конструкций, включающее разработку интегральных схем.\nИскусственный интеллект приобретает все большее значение, одновременно с этим становясь более сложным и эффективным. Существует множество применений искусственного интеллекта (ИИ), например роботы-пылесосы, которые можно использовать дома. ИИ также присутствует в видеоиграх, роботах огневой поддержки и противоракетных системах.\n\n\n== Структура информатики ==\nИнформатика делится на ряд разделов. Как дисциплина, информатика охватывает широкий круг тем от теоретических исследований алгоритмов и пределов вычислений до практической реализации вычислительных систем в области аппаратного и программного обеспечения. Комитет CSAB, ранее называемый «Советом по аккредитации вычислительных наук», включающий представителей Ассоциации вычислительной техники (ACM) и Компьютерного общества IEEE (IEEE-CS) — определил четыре области, важнейшие для дисциплины информатика: теория вычислений, алгоритмы и структуры данных, методология программирования и языков, компьютерные элементы и архитектура. В дополнение к этим четырём направлениям, комитет CSAB определяет следующие важные области информатики: разработка программного обеспечения, искусственный интеллект, компьютерные сети и телекоммуникации, системы управления базами данных, параллельные вычисления, распределённые вычисления, взаимодействия между человеком и компьютером, компьютерная графика, операционные системы, числовые и символьные вычисления.\n\n\n=== Теоретическая информатика ===\n\nОгромное поле исследований теоретической информатики включает как классическую теорию алгоритмов, так и широкий спектр тем, связанных с более абстрактными логическими и математическими аспектами вычислений.\nТеоретическая информатика занимается теориями формальных языков, автоматов, алгоритмов, вычислимости и вычислительной сложности, а также вычислительной теорией графов, криптологией, логикой (включая логику высказываний и логику предикатов), формальной семантикой и закладывает теоретические основы для разработки компиляторов языков программирования.\n\n\n==== Теория алгоритмов ====\n\nПо словам Питера Деннинга, к фундаментальным вопросам информатики относится следующий вопрос: «Что может быть эффективно автоматизировано?» Изучение теории алгоритмов сфокусировано на поиске ответов на фундаментальные вопросы о том, что можно вычислить и какое количество ресурсов необходимо для этих вычислений. Для ответа на первый вопрос в теории вычислимости рассматриваются вычислительные задачи, решаемые на различных теоретических моделях вычислений. Второй вопрос посвящён теории вычислительной сложности; в этой теории анализируются затраты времени и памяти различных алгоритмов при решении множества вычислительных задач.\nЗнаменитая задача «P=NP?», одна из Задач тысячелетия, является нерешённой задачей в теории алгоритмов.\n\n\n==== Информация и теория кодирования ====\n\nТеория информации связана с количественной оценкой информации. Это направление получило развитие благодаря трудам Клода Э. Шеннона, который нашёл фундаментальные ограничения на обработку сигнала в таких операциях, как сжатие данных, надёжное сохранение и передача данных.\nТеория кодирования изучает свойства кодов (системы для преобразования информации из одной формы в другую) и их пригодность для конкретной задачи. Коды используются для сжатия данных, в криптографии, для обнаружения и коррекции ошибок, а в последнее время также и для сетевого кодирования. Коды изучаются с целью разработки эффективных и надёжных методов передачи данных.\n\n\n==== Алгоритмы и структуры данных ====\nАлгоритмы и структуры данных, как раздел информатики, связаны с изучением наиболее часто используемых вычислительных методов и оценкой их вычислительной эффективности.\n\n\n==== Теория языков программирования ====\nВ теории языков программирования, как подразделе информатики, изучают проектирование, реализацию, анализ и классификацию языков программирования в целом, а также изучают отдельные элементы языков. Эта область информатики, с одной стороны, в большой степени полагается на достижения таких наук как математика, программная инженерия и лингвистика, с другой стороны, сама оказывает большое влияние на их развитие. Теория языков программирования активно развивается, многие научные журналы посвящены этому направлению.\n\n\n==== Формальные методы ====\n\nФормальные методы — это своего рода математический подход, предназначенный для спецификации, разработки и верификации программных и аппаратных систем. Использование формальных методов при разработке программного и аппаратного обеспечения мотивировано расчётом на то, что, как и в других инженерных дисциплинах, надлежащий математический анализ обеспечит надёжность и устойчивость проекта. Формальные методы являются важной теоретической основой при разработке программного обеспечения, особенно в случаях, когда дело касается надёжности или безопасности. Формальные методы являются полезным дополнением к тестированию программного обеспечения, так как они помогают избежать ошибок, а также являются основой для тестирования. Для их широкого использования требуется разработка специального инструментария. Однако высокая стоимость использования формальных методов указывает на то, что они, как правило, используются только при разработке высокоинтегрированных и жизненно-важных систем, где надёжность и безопасность имеют первостепенное значение. Формальные методы имеют довольно широкое применение: от теоретических основ информатики (в частности, логики вычислений, формальных языков, теории автоматов, программ и семантики) до систем типов и проблем алгебраических типов данных в задачах спецификации и верификации программного и аппаратного обеспечения.\n\n\n=== Прикладная информатика ===\nПрикладная информатика направлена на применение понятий и результатов теоретической информатики к решению конкретных задач в конкретных прикладных областях.\n\n\n==== Искусственный интеллект ====\n\nЭто область информатики, неразрывно связанная с такими целеполагающими процессами, как решение задач, принятие решений, адаптация к окружающим условиям, обучение и коммуникация, присущими и людям, и животным. Возникновение искусственного интеллекта (ИИ) связано с кибернетикой и ведёт свой отсчёт с Дартмутской Конференции (1956). Исследования в области искусственного интеллекта (AI) с необходимостью были междисциплинарными, и основывались на таких науках, как: прикладная математика, математическая логика, семиотика, электротехника, философия сознания, нейрофизиология и социальный интеллект. У обывателей искусственный интеллект ассоциируется в первую очередь с робототехникой, но кроме этого ИИ является неотъемлемой частью разработки программного обеспечения в самых разных областях. Отправной точкой в конце 1940-х годов стал вопрос Алана Тьюринга: «Могут ли компьютеры думать?», и этот вопрос остаётся фактически без ответа, хотя «тест Тьюринга» до сих пор используется для оценки результатов работы компьютера в масштабах человеческого интеллекта.\n\n\n==== Архитектура компьютера и компьютерная инженерия ====\n\nАрхитектура компьютера, или организация цифрового компьютера, является концептуальной структурой компьютерной системы. Она сосредоточена в основном на способе, при котором центральный процессор выполняет внутренние операции и обращается к адресам в памяти. Она часто включает в себя дисциплины вычислительной техники и электротехники, выбор и соединение аппаратных компонентов для создания компьютеров, которые удовлетворяют функциональным, производительным и финансовым целям.\nКомпьютерная инженерия связана с аппаратной частью вычислительной техники, например основами микропроцессорной техники, компьютерных архитектур и распределённых систем. Таким образом, она обеспечивает связь с электротехникой.\n\n\n==== Анализ производительности компьютера ====\n\nАнализ производительности компьютера — это изучение работы компьютеров с целью повышения пропускной способности, управления временем отклика, эффективного использования ресурсов, устранения узких мест и прогнозирования производительности при предполагаемых пиковых нагрузках.\n\n\n==== Компьютерная графика и визуализация ====\n\nКомпьютерная графика представляет собой изучение цифрового визуального содержания и включает в себя синтез и манипуляцию данными изображения. Это направление связано со многими другими областями информатики, в том числе с компьютерным зрением, обработкой изображений и вычислительной геометрией, также оно активно применяется в области спецэффектов и видео-игр.\n\n\n==== Компьютерная безопасность и криптография ====\n\nКомпьютерная безопасность — это направление исследований компьютерных технологий, нацеленных на защиту информации от несанкционированного доступа, разрушения или модификацию при сохранении доступности и удобства использования системы для предполагаемых пользователей. Криптография же является наукой о шифровании и дешифровании информации. Современная криптография в значительной степени связана с информатикой, поскольку при разработке и использовании многих алгоритмов шифрования и дешифрования учитывается их вычислительная сложность.\n\n\n==== Компьютерное моделирование и численные методы ====\nКомпьютерное моделирование и численные методы являются областями исследований в задаче построения математических моделей, методов количественного анализа, использования компьютеров для анализа и решения научных проблем. На практике, это, как правило, применение компьютерного моделирования и других форм вычислений, применяемых в задачах различных научных дисциплин.\n\n\n==== Компьютерные сети ====\n\nЕщё одним важным направлением является связь между машинами. Она обеспечивает электронный обмен данными между компьютерами и, следовательно, представляет собой техническую базу для Интернета. Помимо разработки маршрутизаторов, коммутаторов и межсетевых экранов, к этой дисциплине относятся разработка и стандартизация сетевых протоколов, таких как TCP, HTTP или SOAP, для обмена данными между машинами.\n\n\n==== Параллельные и распределённые системы ====\n\nПараллелизм — это свойство систем, при котором несколько вычислений выполняются одновременно, и при этом, возможно, взаимодействуют друг с другом. Был разработан ряд математических моделей для общего вида параллельных вычислений, в том числе сети Петри, процессы исчисления и модель Parallel Random Access Machine (машины с параллельным произвольным доступом). Распределённая система расширяет идею параллелизма на несколько компьютеров, связанных посредством сети. Компьютеры в пределах одной распределённой системы имеют свою собственную память и часто обмениваются информацией между собой для достижения общей цели.\n\n\n==== Базы данных ====\n\nБаза данных — организованная в соответствии с определёнными правилами и поддерживаемая в памяти компьютера совокупность данных, характеризующая актуальное состояние некоторой предметной области и используемая для удовлетворения информационных потребностей пользователей. Управление базами данных происходит с помощью систем управления базами данных (СУБД).\n\n\n==== Информатика в здравоохранении ====\nИнформатика здравоохранения рассматривает вычислительные методы для решения задач в сфере здравоохранения.\n\n\n==== Информационная наука ====\n\nИнформационная наука — это междисциплинарная область, связанная с анализом, сбором, классификацией, манипулированием, хранением, поиском, распространением и защитой информации[уточнить].\n\n\n==== Программная инженерия ====\n\nПрограммная инженерия — это приложение систематического, дисциплинированного, измеримого подхода к разработке, функционированию и сопровождению программного обеспечения, а также исследованию этих подходов; то есть, приложение дисциплины инженерии к программному обеспечению\n\n\n=== Естественная информатика ===\n\nЕстественная информатика — это естественнонаучное направление, изучающее процессы обработки информации в природе, мозге и человеческом обществе[уточнить]. Она опирается на такие классические научные направления, как теории эволюции, морфогенеза и биологии развития, системные исследования, исследования мозга, ДНК, иммунной системы и клеточных мембран, теория менеджмента и группового поведения, история и другие. Кибернетика, определяемая, как «наука об общих закономерностях процессов управления и передачи информации в различных системах, будь то машины, живые организмы или общество» представляет собой близкое, но несколько иное научное направление. Так же, как математика и основная часть современной информатики, оно вряд ли может быть отнесено к области естественных наук, так как резко отличается от них своей методологией, (несмотря на широчайшее применение в современных естественных науках математического и компьютерного моделирования).\n\n\n== В научном сообществе ==\n\n\n=== Конференции ===\nКонференции являются стратегическими событиями научных исследований в области информатики. В ходе этих конференций исследователи из бюджетного и частного секторов встречаются и представляют свои последние работы. Труды этих конференций являются важной частью литературы по информатике.\n\n\n=== Журналы ===\n\n\n== В образовании ==\nВ некоторых университетах информатика преподаётся в качестве теоретического изучения вычислений и автоматического вывода. Такие программы часто включают в себя теорию алгоритмов, анализ алгоритмов, формальные методы, параллелизм в информатике, базы данных, компьютерную графику, системный анализ и другие. Как правило, в такие учебные программы включают преподавание программирования, но не акцентируют на нём внимания, как финальной цели обучения, а рассматривают программирование как необходимый элемент изучения всех прочих областей информатики. Организация Ассоциация вычислительной техники (ACM) разрабатывает рекомендации для университетских учебных программ по информатике.\nДругие колледжи и вузы, а также средние школы и учебные заведения профессиональной подготовки, которые обучают информатике, делают в своих учебных курсах акцент на практике программирования, а не на теории алгоритмов и вычислений. Такие учебные программы, как правило, сосредоточены на тех практических навыках, которые важны для работников индустрии программной инженерии.\n\n\n=== Образование в США ===\nВ последние годы интерес к использованию методов информатики в различных сферах научных исследований и практических разработок возрастает. Такого рода интерес проявляют не только учёные, но и правительственные структуры. К примеру, в 2005 году Консультативный комитет по информационным технологиям при Президенте США подготовил доклад на эту тему. В этом докладе были представлены результаты анализа деятельности в данной области в США, сообщающие о необходимости скорых решительных действий с целью предупреждения негативных тенденций, наблюдаемых в американской науке и системе образования.\nЭкономика США всё в большей степени полагается на специалистов в области информатики, но подготовка кадров в этой области отсутствует в большинстве американских учебных программ. Отчёт, озаглавленный «Running on Empty: The Failure to Teach K-12 Computer Science in the Digital Age» был представлен в октябре 2010 года организацией АСМ и Ассоциацией Учителей Информатики (CSTA) и показал, что только 14 штатов приняли образовательные стандарты по информатике в высшем образовании. Также в докладе отмечается, что только в 9 штатах предмет «Информатика» является базовым (обязательным) учебным предметом, необходимым для аттестации в старших классах школы.\nВ союзе с «Running on Empty» новая внепартийная коалиция защиты прав — Computing in the Core (CinC) — была создана, чтобы влиять на федеральную и государственную политику. В результате работы коалиции был принят «Закон об образовании в области информатики» («Computer Science Education Act»), обеспечивающий дотациями те штаты, которые ведут работу по повышению качества образования в области информатики и поддержке учителей информатики.\n\n\n=== Образование в России ===\n\nИменно в нашей[уточнить] стране впервые были сформированы представления об информатике как о фундаментальной науке, имеющей важное междисциплинарное, научно-методологическое и мировоззренческое значение. Именно Россия на 2-м Международном конгрессе ЮНЕСКО «Образование и информатика» (Москва, 1996 г.) предложила новую концепцию изучения проблем информатики как фундаментальной науки и общеобразовательной дисциплины в системе опережающего образования. При этом была предложена также и новая структура образовательной области «Информатика» для системы образования и показано, что переход к этой структуре может стать важным шагом на пути интеграции фундаментальной науки и образования.\n\nНачиная с 1990 года, в России развивается такое направление как социальная информатика. Предполагается, что оно станет научной базой для формирования информационного общества.\nПомимо этого, в Российской академии наук вырабатываются философские, семиотические и лингвистические основы информатики, формируются новые подходы к структуризации предметной области информатики, учитывающие её перспективные направления развития и современные тенденции развития образования и науки.\n\n\n== Основные термины ==\nИнформационный ресурс — концентрация имеющихся фактов, документов, данных и знаний, отражающих реальное изменяющееся во времени состояние общества, и используемых при подготовке кадров, в научных исследованиях и материальном производстве.\nИнформационная среда — хранящаяся в компьютере, но не оформленная в виде информационной системы совокупность знаний, фактов и сведений, относящаяся к некоторой предметной области и используемая одним или несколькими пользователями.\nИнформационная технология — совокупность методов, устройств и производственных процессов, используемых людьми для сбора, хранения, обработки и распространения информации.\n\n\n== См. также ==\nХемоинформатика\n\n\n== Примечания ==\n\n\n== Литература ==\nВайсбанд Игорь. 5000 лет информатики. — М.: «Черная белка», 2010. — 352 с. — 2000 экз. — ISBN 978-5-91827-005-9.\nВолкова В. Н., Чёрный Ю. Ю. К 50-летию появления термина «информатика» в отечественной научной литературе // Прикладная информатика, № 4 (46), 2013\nГлушков В. М. Безбумажная информатика. — М.: Наука, 1978.\nГрошев А. С. Информатика. Учебник для вузов. — Архангельск: Арханг. гос. техн. ун-т, 2010. — 470 с. — ISBN 978-5-261-00480-6. Архивная копия от 11 августа 2011 на Wayback Machine\nДорот В. Л., Новиков Ф. А. Толковый словарь современной компьютерной лексики. — СПб.: БХВ-Петербург, 2004. — ISBN 5-94157-491-6.\nЕршов А. П., Монахов В. М., Бешенков С. А. Основы информатики и вычислительной техники. — 1985.\nИнформатика // Большая российская энциклопедия / Кравец С. Л.. — М.: ОАО «Научное издательство «Большая Российская Энциклопедия», 2008. — Т. 11. Изучение плазмы - Исламский фронт спасения. — С. 481—484. — 767 с. — 65 000 экз. — ISBN 978-5-85270-342-2.\nКолин К. К. Становление информатики как фундаментальной науки и комплексной научной проблемы. — 2006. — С. 1.\nМихайлов А. И., Черный А. И., Гиляревский Р. С. Информатика // Научные коммуникации и информатика. — М.: Наука, 1976. — С. 392—416. — 433 с. — 10 400 экз.\nМихайлов А. И., Черный А. И., Гиляревский Р. С. Основы информатики. — 2-е изд., перераб. и доп. — М.: Наука, 1968.\nАладьев В.З., Хунт Ю.Я., Шишаков М. Л. Основы информатики: Учебное пособие. — 2-е изд., перераб. и доп. — М.: Издат. дом «Филин», 1999. — 544 с. — ISBN 5-89568-131-X.\nРазборов А.А. Theoretical Computer Science: взгляд математика // Компьютерра. — 2001. — № 2. (недоступная ссылка) (альтернативная ссылка)\nСоветов Б.Я., Цехановский В.В. Информационные технологии: Учеб. для вузов. — М.: Высш. шк., 2003. — 263 с.\nЧерный Ю. Ю. Полисемия в науке: когда она вредна?(на примере информатики) // Открытое образование : журнал. — 2010. — № 6. — С. 97—107.\nAbelson H., G.J. Sussman with J. Sussman. Structure and Interpretation of Computer Programs. — 2nd. — MIT Press, 1996. — ISBN 0-262-01153-0.\nBrookshear, J. Glenn. Введение в компьютерные науки = Computer Science: An Overview. — 6-е изд. — М.: Вильямс, 2001. — 688 с. — ISBN 5-8459-0179-0.\nCohen, Bernard. Howard Aiken: Portrait of a Computer Pioneer (History of Computing). — 1999. — ISBN 0-262-03262-7.\nCollier, Bruce. The little engine that could've: The calculating machines of Charles Babbage (англ.). — Garland Publishing Inc, 1970. — ISBN 0-8240-0043-9.\nCommittee on the Fundamentals of Computer Science: Challenges and Opportunities, National Research Council. Computer Science: Reflections on the Field, Reflections from the Field (англ.). — National Academies Press, 2004. — ISBN 978-0-309-09301-9.\nD. E. Comer, David Gries, Michael C. Mulder, Allen Tucker, A. Joe Turner, Paul R. Young. Computing as a discipline (англ.) // Communications of the ACM. — 1989. — Vol. 32, no. 1. — P. 9—23. — ISSN 0001-0782. — doi:10.1145/63238.63239.\nConstable, R.L. Computer Science: Achievements and Challenges circa 2000 (англ.). — 2000. Архивировано 26 ноября 2024 года.\nDennis P. Groth, Jeffrey K. MacKie-Mason. Why an informatics degree? Isn’t computer science enough? (англ.) // Communications of the ACM : Magazine. — New York, USA, 2010. — Vol. 53. — P. 26—28. — doi:10.1145/1646353.1646364. Архивировано 28 марта 2013 года.\nEden, A. H. Three Paradigms of Computer Science (англ.) // Minds and Machines : journal. — 2007. — July (vol. 17, no. 2). — P. 16—17. — doi:10.1007/s11023-007-9060-8.\nFein, Louis. The Role of the University in Computers, Data Processing, and Related Fields (англ.) // Communications of the ACM : journal. — 1959. — Vol. 2, no. 9. — P. 7—14. — doi:10.1145/368424.368427.\nFourman, Michael. \"informatics\" (англ.) // International Encyclopedia of Information and Library Science. — 2002. — P. 237—244.\nHofkirchner, Wolfgang. \"Information Science\": An Idea Whose Time Has Come (англ.) // Informatik Forum. — 1995. — No. 3. — P. 99—106.\nHyman, Anthony. Charles Babbage, pioneer of the computer (англ.). — Oxford University Press, 1982. — 287 p. — ISBN 9780691083032.\nKahn, David. The Codebreakers. — 1967. — ISBN 0-684-83130-9.\nKnuth, Donald. George Forsythe and the Development of Computer Science (англ.). — 1972.\nLevy, Steven. Hackers: Heroes of the Computer Revolution (неопр.). — Doubleday, 1984. — ISBN 0-385-19195-2.\nLhermitte P. Le pari informatique. — Paris, 1968. — С. 20.\nMounier-Kuhn, P. гл. 3 и 4 // L’Informatique en France, de la seconde guerre mondiale au Plan Calcul. L’émergence d’une science. — Paris, 2010.\nNaur, Peter. The science of datalogy (англ.) // Communications of the ACM : journal. — 1966. — Vol. 9, no. 7. — P. 485. — doi:10.1145/365719.366510.\nRandell, Brian. The Origins of Digital Computers: Selected Papers. — 1973. — ISBN 0-387-11319-3.\nSteinbuch, K. Informatik: Automatische Informationsverarbeitung (неопр.) // SEG-Nachrichten (Technische Mitteilungen der Standard Elektrik Gruppe) – Firmenzeitschrift. — 1957.\nStreubel, Jennifer. Department of Computer Science (англ.). — 2003.\nTedre, Matti. The Development of Computer Science: A Sociocultural Perspective. — Joensuu, 2006. — С. 260.\nWescott, Bob. The Every Computer Performance Book, Chapter 3: Useful laws (англ.). — CreateSpace, 2013. — ISBN 1482657759.\nWiener, Norbert. Cybernetics or Control and Communication in the Animal and the Machine. — New York: MIT Press, 1948. — 212 с.\nZink, Brian. Computer science pioneer Samuel D. Conte dies at 85 (англ.) // Purdue University. — 2002.\n\n\n== Ссылки ==\n\nA Brief History of Computing (англ.).\nACM Curricula Recommendations (англ.).\nA Selection and Adaptation From Ada's Notes found in \"Ada, The Enchantress of Numbers,\" by Betty Alexandra Toole Ed.D. Strawberry Press, Mill Valley, CA (англ.). Архивировано 10 февраля 2006 года.\nBlack box traders are on the march (англ.). The Telegraph (27 августа 2006). Дата обращения: 22 октября 2014.\nBlaise Pascal (англ.). School of Mathematics and Statistics University of St Andrews, Scotland.\nComputing Sciences Accreditation Board. Computer Science as a Profession  (неопр.) (28 мая 1997). Дата обращения: 23 мая 2010. Архивировано 17 июня 2008 года.\nCsab, Inc  (неопр.). Csab.org (3 августа 2011).\nGraham, P. Collins. Claude E. Shannon: Founder of Information Theory  (неопр.). Scientific American, Inc..\nIBM 704 Electronic Data Processing System - CHM Revolution  (неопр.). Computerhistory.org.\nP vs NP Problem. Clay Mathematics Institute  (неопр.). Архивировано из оригинала 18 октября 2014 года.\nRonald, A. Thisted. COMPUTER ARCHITECTURE  (неопр.). The University of Chicago.\nScience Museum - Introduction to Babbage (англ.). Архивировано 8 сентября 2006 года.\nSome EDSAC statistics  (неопр.). Cl.cam.ac.uk.\nStanford University Oral History  (неопр.). Stanford University.\nThe Impact of High Frequency Trading on an Electronic Market (англ.). Papers.ssrn.com. doi:10.2139/ssrn.1686004. Дата обращения: 23 октября 2014.\nWegner, P. (October 13-15, 1976). \"Research paradigms in computer science\". Proceedings of the 2nd international Conference on Software Engineering. San Francisco, California, United States: IEEE Computer Society Press, Los Alamitos, CA. {{cite conference}}: Неизвестный параметр |booktitle= игнорируется (|book-title= предлагается) (справка)Википедия:Обслуживание CS1 (формат даты) (ссылка)\nhttp://archive.computerhistory.org/resources/text/IBM/IBM.709.1957.102646304.pdf  (неопр.). Дата обращения: 27 октября 2014. Архивировано из оригинала 4 марта 2016 года.\nhttps://web.archive.org/web/20060525195404/http://www.idi.ntnu.no/emner/dif8916/denning.pdf (англ.). Архивировано 25 мая 2006 года.\nСовместный семинар ИПИ РАН и ИНИОН РАН «Методологические проблемы наук об информации»\nСтатьи по информатике и информационным технологиям из научных библиотек\nТезаурус ЮНЕСКО  (неопр.). Архивировано 24 мая 2013 года.\nФилософия информации и философские проблемы информатики. Методология и терминология информатики (специальный выпуск журнала) // Метафизика : журнал. — 2013. — № 4(10). — ISSN 2224-7580.",
        "links": [
            "1948 год",
            "1960-е годы",
            "4 декабря",
            "CASE",
            "CGI (графика)",
            "CMMI",
            "CSAB",
            "Capability Maturity Model",
            "Cleanroom Software Engineering",
            "Communications of the ACM",
            "Computer science and engineering",
            "CreateSpace",
            "DSDM",
            "Doi",
            "Dual Vee Model",
            "Folding@home",
            "Function model",
            "Garland Science",
            "Gemeinsame Normdatei",
            "HTTP",
            "IBM",
            "IBM 704",
            "IDEF",
            "Levy, Steven",
            "Microsoft Solutions Framework",
            "Minds and Machines",
            "National Academies Press",
            "Object model",
            "OpenUP",
            "RAD (программирование)",
            "Rational Unified Process",
            "SOAP",
            "SPICE (симулятор электронных схем)",
            "Scaled Agile Framework",
            "Scrum",
            "TCP",
            "UML",
            "Unified Process",
            "V-Model",
            "View model",
            "Wayback Machine",
            "Абак",
            "Абстрактная модель",
            "Абстракция",
            "Автоматический вывод",
            "Ада Лавлейс",
            "Алан Тьюринг",
            "Алгебраический тип данных",
            "Алгоритм",
            "Алгоритмическая торговля",
            "Анализ алгоритмов",
            "Анализ требований",
            "Английский язык",
            "Аппаратное обеспечение",
            "Арифмометр",
            "Архитектура компьютера",
            "Архитектура программного обеспечения",
            "Архитектура системы",
            "Аспектно-ориентированное программирование",
            "Ассоциация вычислительной техники",
            "База данных",
            "Бек, Кент",
            "Библиотековедение",
            "Биоинформатика",
            "Биология развития",
            "Блез Паскаль",
            "Большая советская энциклопедия",
            "Боэм, Барри",
            "Брук, Исаак Семёнович",
            "Брукс, Фредерик",
            "Булева алгебра",
            "Буч, Гради",
            "Бэббидж, Чарльз",
            "Взаимодействие",
            "Взломщики кодов",
            "Вильямс (издательство)",
            "Вирт, Никлаус",
            "Волатильность",
            "Время отклика",
            "Всероссийский институт научной и технической информации РАН",
            "Вторая Мировая война",
            "Вычисление",
            "Вычислительная геометрия",
            "Вычислительная математика",
            "Вычислительная машина",
            "Вычислительная мощность компьютера",
            "Вычислительная сложность",
            "Вычислительная техника",
            "Вычислительная физика",
            "Вычислительная химия",
            "Вычислительные методы",
            "Гарвардская школа бизнеса",
            "Геоинформатика",
            "Герман Холлерит",
            "Германия",
            "Гибкая методология разработки",
            "Глушков В. М.",
            "Говард Эйкен",
            "Головной мозг",
            "Готфрид Лейбниц",
            "Греция",
            "Гуманитарные науки",
            "Даль, Оле-Йохан",
            "Дарвинизм",
            "Дартмутский семинар",
            "Двоичная система счисления",
            "Дезоксирибонуклеиновая кислота",
            "Дейкстра, Эдсгер Вибе",
            "Демарко, Том",
            "Джеймс Мартин (писатель)",
            "Джексон, Майкл Энтони",
            "Документация на программное обеспечение",
            "Ершов, Андрей Петрович",
            "Естественная информатика",
            "Естественные науки",
            "Жизненно-важная система",
            "Задачи тысячелетия",
            "ИНИОН РАН",
            "ИПИ РАН",
            "Идентификатор цифрового объекта",
            "Изобретение",
            "Иммунная система",
            "Инжиниринг",
            "Институт проблем информатики РАН",
            "Институт проблем передачи информации имени А. А. Харкевича РАН",
            "Интеллектуальный анализ данных",
            "Интернет",
            "Интерфейс пользователя",
            "Информатика здравоохранения",
            "Информационная безопасность",
            "Информационная модель",
            "Информационная наука",
            "Информационная энтропия",
            "Информационная эра",
            "Информационный поиск",
            "Информация",
            "Искусственный интеллект",
            "Исследование операций",
            "История",
            "История информатики",
            "Исчисление процессов",
            "Итеративная разработка",
            "Йордан, Эдвард",
            "Казахская энциклопедия",
            "Казахстан. Национальная энциклопедия",
            "Калькулятор",
            "Калькулятор Лейбница",
            "Кан, Дэвид",
            "Каннингем, Уорд",
            "Каскадная модель",
            "Качество программного обеспечения",
            "Квантовый компьютер",
            "Кембриджский университет",
            "Кибернетика",
            "Клеточная мембрана",
            "Клод Шеннон",
            "Кнут, Дональд Эрвин",
            "Когнитивистика",
            "Код",
            "Кольмар, Шарль Ксавье Тома де",
            "Комбинаторная оптимизация",
            "Компилятор",
            "Компьютер",
            "Компьютерная графика",
            "Компьютерная игра",
            "Компьютерная инженерия",
            "Компьютерная программа",
            "Компьютерная сеть",
            "Компьютерное зрение",
            "Компьютерное моделирование",
            "Компьютерное общество IEEE",
            "Компьютерный анализ медицинских изображений",
            "Компьютерра",
            "Конструкция компилятора",
            "Контрольный номер Библиотеки Конгресса",
            "Копенгагенский университет",
            "Криптоанализ",
            "Криптография",
            "Криптология",
            "Кэй, Алан Кёртис",
            "Лавлейс, Ада",
            "Ларман, Крэг",
            "Логика",
            "Логика в информатике",
            "Логика высказываний",
            "М-1 (электронно-вычислительная машина)",
            "Макконнелл, Стив",
            "Марк I (компьютер)",
            "Мартин, Роберт (инженер)",
            "Маршрутизатор",
            "Математика",
            "Математическая логика",
            "Машинное обучение",
            "Международный стандартный серийный номер",
            "Межсетевой экран",
            "Мейер, Бертран",
            "Менеджмент",
            "Метамодель (информатика)",
            "Методология программирования",
            "Микроархитектура",
            "Михайлов, Александр Иванович",
            "Многопроцессорность",
            "Модели вычислений",
            "Моделирование",
            "Модель Spotify",
            "Модель данных",
            "Морфогенез",
            "Мюнхенский технический университет",
            "Народное хозяйство",
            "Наука",
            "Науковедение",
            "Наумов, Борис Николаевич",
            "Научно-техническая революция",
            "Национальная библиотека Израиля",
            "Национальная библиотека Испании",
            "Национальная библиотека Франции",
            "Национальная библиотека Чешской Республики",
            "Нейрофизиология",
            "Немецкий язык",
            "Неолитическая революция",
            "Обнаружение и исправление ошибок",
            "Обработка естественного языка",
            "Обработка изображений",
            "Обработка информации",
            "Обработка сигналов",
            "Общая теория систем",
            "Общественные науки",
            "Объектно-ориентированное программирование",
            "Операционная система",
            "Парадигма программирования",
            "Параллелизм (информатика)",
            "Параллельная машина с произвольным доступом",
            "Парнас, Дэвид",
            "Передача данных",
            "Перфокарта",
            "Питер Вегнер",
            "Питер Джеймс Деннинг",
            "Питер Наур",
            "Повсеместные вычисления",
            "Предикат",
            "Предметно-ориентированное проектирование",
            "Представление знаний",
            "Прикладная математика",
            "Прикладные исследования",
            "Программирование",
            "Программная инженерия",
            "Программное обеспечение",
            "Проект «Геном человека»",
            "Проектирование программного обеспечения",
            "Промышленная революция",
            "Пропускная способность",
            "Протокол передачи данных",
            "Процесс разработки программного обеспечения",
            "Равенство классов P и NP",
            "Разностная машина Чарльза Бэббиджа",
            "Разработка программного обеспечения",
            "Рамбо, Джеймс",
            "Рамеев, Башир Искандарович",
            "Распределённые вычисления",
            "Робототехника",
            "Ройс, Уинстон",
            "Семантика (программирование)",
            "Семиотика",
            "Сетевое кодирование",
            "Сетевой коммутатор",
            "Сеть Петри",
            "Сжатие данных",
            "Система типов",
            "Система управления базами данных",
            "Системный анализ",
            "Славянские языки",
            "Словарь",
            "Совет Министров СССР",
            "Социальная информатика",
            "Социальное поведение",
            "Социальный интеллект",
            "Союз Советских Социалистических Республик",
            "Спецэффект",
            "Спиральная модель",
            "Стадии разработки программного обеспечения",
            "Статистика",
            "Структура данных",
            "Структуры данных",
            "Суммирующая машина Паскаля",
            "Табулятор",
            "Тезаурус",
            "Теоретическая информатика",
            "Теория автоматов",
            "Теория алгоритмов",
            "Теория вычислимости",
            "Теория графов",
            "Теория информации",
            "Теория кодирования",
            "Теория распознавания образов",
            "Теория сложности вычислений",
            "Теория типов",
            "Теория языка программирования",
            "Тест Тьюринга",
            "Тестирование программного обеспечения",
            "Технические науки",
            "Точные науки",
            "Узкое место",
            "Университет Пердью",
            "Уоттс Хамфри",
            "Учительская газета",
            "Фаулер, Мартин",
            "Философия сознания",
            "Фолдинг белка",
            "Формальная верификация",
            "Формальная спецификация",
            "Формальные методы",
            "Формальный язык",
            "Форсайт, Джордж (информатик)",
            "Французский язык",
            "Фундаментальная наука",
            "Хакеры: Герои компьютерной революции",
            "Харкевич, Александр Александрович",
            "Хемоинформатика",
            "Хоар, Чарльз Энтони Ричард",
            "Цифровая революция",
            "Цифровой компьютер",
            "Чарльз Бэббидж",
            "Человеко-компьютерное взаимодействие",
            "Числа Бернулли",
            "Численный анализ",
            "Штейнбух, Карл",
            "ЭВМ",
            "Эволюционное моделирование",
            "Экстремальное программирование",
            "Электротехника",
            "Энигма",
            "ЮНЕСКО",
            "Язык программирования",
            "Языки Европы",
            "Языки программирования",
            "Якобсон, Ивар"
        ],
        "images": [
            "Файл:1u04-argonaute.png",
            "Файл:3-Tasten-Maus Microsoft.jpg",
            "Файл:Ada lovelace.jpg",
            "Файл:Ambox globe content.svg",
            "Файл:Babbage40.png",
            "Файл:Blochsphere.svg",
            "Файл:Commons-logo.svg",
            "Файл:Compiler.svg",
            "Файл:Corner.png",
            "Файл:DFAexample.svg",
            "Файл:Earth.png",
            "Файл:Emp Tables (Database).PNG",
            "Файл:Enigma.jpg",
            "Файл:Fivestagespipeline.png",
            "Файл:Flowchart.png",
            "Файл:HONDA ASIMO.jpg",
            "Файл:Human eye, rendered from Eye.png",
            "Файл:Julia iteration data.png",
            "Файл:KnnClassification.svg",
            "Файл:Lambda lc.svg",
            "Файл:Lorenz attractor yb.svg",
            "Файл:MeningiomaMRISegmentation.png",
            "Файл:NOR ANSI.svg",
            "Файл:Naphthalene-3D-balls.png",
            "Файл:Network Library LAN-ru.svg",
            "Файл:Neuron-rus.svg",
            "Файл:Nicolas P. Rougier's rendering of the human brain.png",
            "Файл:Notification-icon-Commons-logo.svg",
            "Файл:Notification-icon-Wiktionary-logo.svg",
            "Файл:OOjs UI icon edit-ltr-progressive.svg",
            "Файл:Operating system placement-ru.svg",
            "Файл:Padlock.svg",
            "Файл:Python add5 syntax.svg",
            "Файл:Quark wiki.jpg",
            "Файл:Roomba original.jpg",
            "Файл:Russian.png",
            "Файл:SIMD-ru.svg",
            "Файл:SimplexRangeSearching.png",
            "Файл:Singly-linked-list.svg",
            "Файл:Sky.png",
            "Файл:Sorting quicksort anim.gif",
            "Файл:Sorting quicksort anim frame.png",
            "Файл:TSP Deutschland 3.png",
            "Файл:User-FastFission-brain.gif",
            "Файл:Utah teapot simple 2.png",
            "Файл:Wang tiles.svg",
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "1948 Год": {
        "title": "1948 Год",
        "extract": "",
        "links": [],
        "images": []
    },
    "1960-Е Год": {
        "title": "1960-Е Год",
        "extract": "",
        "links": [],
        "images": []
    },
    "4 Декабрь": {
        "title": "4 Декабрь",
        "extract": "",
        "links": [],
        "images": []
    },
    "Case": {
        "title": "Case",
        "extract": "case (программирование) — оператор выбора в языках программирования Switch statement  (англ.);\nCASE — парадигма программирования Computer-aided software engineering  (англ.);\nCase STX Steiger — трактор с шарнирно-сочленённой рамой компании Steiger Tractor и поставляемых на рынок под маркой Case;\nCamelCase — стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово пишется с заглавной буквы;\n (англ.) Computer Case, компьютерный корпус — системный блок.\n\n\n== См. также ==\nКейс",
        "links": [
            "CASE",
            "CamelCase",
            "Case (программирование)",
            "Case STX Steiger",
            "Викисловарь",
            "Кейс",
            "Компьютерный корпус",
            "Системный блок"
        ],
        "images": [
            "Файл:Disambig.svg",
            "Файл:Notification-icon-Wiktionary-logo.svg"
        ]
    },
    "Cgi (Графика)": {
        "title": "Cgi (Графика)",
        "extract": "",
        "links": [],
        "images": []
    },
    "Cmmi": {
        "title": "Cmmi",
        "extract": "",
        "links": [],
        "images": []
    },
    "Csab": {
        "title": "Csab",
        "extract": "",
        "links": [],
        "images": []
    },
    "Capability Maturity Model": {
        "title": "Capability Maturity Model",
        "extract": "Capability Maturity Model — модель зрелости возможностей (модель полноты потенциала) создания ПО: эволюционная модель развития способности компании разрабатывать программное обеспечение.\n\n\n== История ==\nВ ноябре 1986 года американский институт Software Engineering Institute (SEI) совместно с Mitre Corporation начали разработку обзора зрелости процессов разработки программного обеспечения, который был предназначен для помощи в улучшении их внутренних процессов.\nРазработка такого обзора была вызвана запросом американского федерального правительства на предоставление метода оценки субподрядчиков для разработки ПО. Реальная же проблема состояла в неспособности управлять большими проектами. Во многих компаниях проекты выполнялись со значительным опозданием и с превышением запланированного бюджета. Необходимо было найти решение данной проблемы.\nВ сентябре 1987 года SEI выпустил краткий обзор процессов разработки ПО с описанием их уровней зрелости, а также опросник, предназначавшийся для выявления областей в компании, в которых были необходимы улучшения. Однако, большинство компаний рассматривало данный опросник в качестве готовой модели, вследствие чего через 4 года вопросник был преобразован в реальную модель, Capability Maturity Model for Software (CMM). Первая версия СММ (Version 1.0), вышедшая в 1991 году, в 1992 году была пересмотрена участниками рабочей встречи, в которой принимали участие около 200 специалистов в области ПО, и членами общества разработчиков. [1]\n\n\n== Уровни ==\nНачальный. Самый примитивный статус организации. Организация способна разрабатывать ПО. Организация не имеет явно осознанного процесса, и качество продукта целиком определяется индивидуальными способностями разработчиков. Один проявляет инициативу, и команда следует его указаниям. Успех одного проекта не гарантирует успех другого. При завершении проекта не фиксируются данные о трудозатратах, расписании и качестве.\nПовторяемый. В некоторой степени отслеживается процесс. Делаются записи о трудозатратах и планах. Функциональность каждого проекта описана в письменной форме. В середине 1999 года лишь 20 % организаций имели 2-й уровень или выше.\nУстановленный. Имеют определённый, документированный и установленный процесс работы, не зависящий от отдельных личностей. Вводятся согласованные профессиональные стандарты, а разработчики их выполняют. Такие организации в состоянии достаточно надёжно предсказывать затраты на проекты, аналогичные выполненным ранее.\nУправляемый. Могут точно предсказать сроки и стоимость работ. Есть база данных накопленных измерений, но нет изменений при появлении новых технологий и парадигм.\nОптимизированный. Есть постоянно действующая процедура поиска и освоения новых и улучшенных методов и инструментов.\n\n\n== Развитие ==\nИспользование модели на практике выявило неоднозначность в подходах к достижению более высоких уровней организации процессов разработки ПО. Поэтому к 2002 году разрабатываются рекомендации по улучшению процесса разработки, которые получают название CMMI (Capability Maturity Model Integration). На текущий момент последняя версия CMMi — 1.3 (опубликована в ноябре 2010) en:Capability Maturity Model Integration .\n\n\n== См. также ==\nИндивидуальный процесс разработки\nУровни зрелости управления\nISO 9000\nISO/IEC 15504\nBalanced Score Card\nITIL\n\n\n== Ссылки ==\nМодель CMM и ИСО 9001:2000 для организации качественной деятельности информационных служб Архивная копия от 21 января 2022 на Wayback Machine\nПеревод на русский язык стандарта SW-CMM v1.1\nZádor Dániel Kelemen. mini CMMI-survey (англ.). SQI Hungarian Software Quality Consulting Institute Ltd. (2007). Архивировано из оригинала 21 февраля 2012 года.",
        "links": [
            "Balanced Score Card",
            "CASE",
            "CMMI",
            "Cleanroom Software Engineering",
            "DSDM",
            "Dual Vee Model",
            "Function model",
            "IDEF",
            "ISO/IEC 15504",
            "ISO 9000",
            "ITIL",
            "Microsoft Solutions Framework",
            "Object model",
            "OpenUP",
            "RAD (программирование)",
            "Rational Unified Process",
            "Scaled Agile Framework",
            "Scrum",
            "UML",
            "Unified Process",
            "V-Model",
            "View model",
            "Wayback Machine",
            "Анализ требований",
            "Архитектура программного обеспечения",
            "Аспектно-ориентированное программирование",
            "Бек, Кент",
            "Боэм, Барри",
            "Брукс, Фредерик",
            "Буч, Гради",
            "Вирт, Никлаус",
            "Гибкая методология разработки",
            "Даль, Оле-Йохан",
            "Дейкстра, Эдсгер Вибе",
            "Демарко, Том",
            "Джеймс Мартин (писатель)",
            "Джексон, Майкл Энтони",
            "Документация на программное обеспечение",
            "Индивидуальный процесс разработки",
            "Информационная модель",
            "Итеративная разработка",
            "Йордан, Эдвард",
            "Каннингем, Уорд",
            "Каскадная модель",
            "Качество программного обеспечения",
            "Кнут, Дональд Эрвин",
            "Кэй, Алан Кёртис",
            "Ларман, Крэг",
            "Макконнелл, Стив",
            "Мартин, Роберт (инженер)",
            "Мейер, Бертран",
            "Метамодель (информатика)",
            "Методология программирования",
            "Модель Spotify",
            "Модель данных",
            "Объектно-ориентированное программирование",
            "Парадигма программирования",
            "Парнас, Дэвид",
            "Предметно-ориентированное проектирование",
            "Программирование",
            "Программное обеспечение",
            "Проектирование программного обеспечения",
            "Профессиональный стандарт",
            "Процесс разработки программного обеспечения",
            "Разработка программного обеспечения",
            "Рамбо, Джеймс",
            "Ройс, Уинстон",
            "Спиральная модель",
            "Стадии разработки программного обеспечения",
            "Тестирование программного обеспечения",
            "Уоттс Хамфри",
            "Уровни зрелости управления",
            "Фаулер, Мартин",
            "Хоар, Чарльз Энтони Ричард",
            "Экстремальное программирование",
            "Якобсон, Ивар"
        ],
        "images": [
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "Cleanroom Software Engineering": {
        "title": "Cleanroom Software Engineering",
        "extract": "Cleanroom Software Engineering (методология «чистой комнаты») — процесс разработки программного обеспечения, предназначенный для создания программного обеспечения с сертифицируемым уровнем надёжности. Cleanroom был первоначально разработан Харланом Миллзом и несколькими его коллегами, в том числе Аланом Хевнером из IBM. Основной принцип cleanroom состоит в том, что предупреждение дефектов лучше, чем их устранение. Название Cleanroom («чистая комната») взято из электронной промышленности — так называются помещения с высокой степенью защиты от загрязнений, позволяющие предотвратить появление дефектов в процессе производства полупроводников. Впервые процесс был применён в середине-конце 80-х годов.\n\n\n== Основные принципы ==\nРазработка программного обеспечения основывается на формальных методах.\nИнкрементальная реализация в рамках статистического контроля качества\nСтатистическое тестирование\nФормальная верификация",
        "links": [
            "Adaptive software development",
            "CASE",
            "CMMI",
            "Capability Maturity Model",
            "DSDM",
            "DevOps",
            "Disciplined Agile Delivery",
            "Dual Vee Model",
            "Feature driven development",
            "Function model",
            "GUI-конструктор",
            "IBM",
            "IDEF",
            "Microsoft Solutions Framework",
            "Object model",
            "OpenUP",
            "RAD (программирование)",
            "Rational Unified Process",
            "SCRUM",
            "Scaled Agile Framework",
            "Scrum",
            "UML",
            "Unified Process",
            "V-Model",
            "View model",
            "Автоматизация релиза",
            "Автоматизация сборки",
            "Анализ требований",
            "Архитектура программного обеспечения",
            "Аспектно-ориентированное программирование",
            "Бек, Кент",
            "Бережливая разработка программного обеспечения",
            "Боэм, Барри",
            "Брукс, Фредерик",
            "Буч, Гради",
            "Вирт, Никлаус",
            "Гибкая методология разработки",
            "Даль, Оле-Йохан",
            "Дейкстра, Эдсгер Вибе",
            "Демарко, Том",
            "Джеймс Мартин (писатель)",
            "Джексон, Майкл Энтони",
            "Документация на программное обеспечение",
            "Индивидуальный процесс разработки",
            "Инструментальное программное обеспечение",
            "Интегрированная среда разработки",
            "Информационная модель",
            "Итеративная разработка",
            "Йордан, Эдвард",
            "Канбан (разработка)",
            "Каннингем, Уорд",
            "Каскадная модель",
            "Качество программного обеспечения",
            "Кнут, Дональд Эрвин",
            "Командный процесс разработки",
            "Компилятор",
            "Конструирование программного обеспечения",
            "Кэй, Алан Кёртис",
            "Ларман, Крэг",
            "Макконнелл, Стив",
            "Мартин, Роберт (инженер)",
            "Мейер, Бертран",
            "Метамодель (информатика)",
            "Методология программирования",
            "Модель Spotify",
            "Модель данных",
            "Объектно-ориентированное программирование",
            "Отладка программы",
            "Отладчик",
            "Парадигма программирования",
            "Парнас, Дэвид",
            "Предметно-ориентированное проектирование",
            "Программирование",
            "Программное обеспечение",
            "Проектирование программного обеспечения",
            "Профилирование (информатика)",
            "Процесс разработки программного обеспечения",
            "Развёртывание программного обеспечения",
            "Разработка, управляемая моделями",
            "Разработка программного обеспечения",
            "Рамбо, Джеймс",
            "Ройс, Уинстон",
            "Сопровождение программного обеспечения",
            "Спиральная модель",
            "Стадии разработки программного обеспечения",
            "Тестирование программного обеспечения",
            "Уоттс Хамфри",
            "Фаулер, Мартин",
            "Хевнер, Алан",
            "Хоар, Чарльз Энтони Ричард",
            "Чистые помещения",
            "Экстремальное программирование",
            "Якобсон, Ивар"
        ],
        "images": [
            "Файл:Question book-4.svg",
            "Файл:System-installer.svg",
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "Communications Of The Acm": {
        "title": "Communications Of The Acm",
        "extract": "",
        "links": [],
        "images": []
    },
    "Computer Science And Engineering": {
        "title": "Computer Science And Engineering",
        "extract": "",
        "links": [],
        "images": []
    },
    "Createspace": {
        "title": "Createspace",
        "extract": "",
        "links": [],
        "images": []
    },
    "Dsdm": {
        "title": "Dsdm",
        "extract": "",
        "links": [],
        "images": []
    },
    "Doi": {
        "title": "Doi",
        "extract": "",
        "links": [
            "Цифровой идентификатор объекта"
        ],
        "images": []
    },
    "Dual Vee Model": {
        "title": "Dual Vee Model",
        "extract": "Dual Vee Model основывается на V-модели, чтобы показать сложности, связанные с проектированием и разработкой систем.\nМодель изображает одновременное развитие архитектуры системы как одной V-модели с каждым объектом этой архитектуры как другую V модель, которая пересекает архитектуру V модели. Это явно показывает взаимодействия и последовательности в разработке сложных систем и систем систем.\n\n\n== Двойная Vee: Перекрещивающаяся архитектура и Модели Vee ==\nЧтобы выявить то, что необходимо пользователю в системе, что удовлетворяет эти пользовательские потребности, требуется наиболее ценное решение для каждого объекта архитектуры. Это можно продемонстрировать наглядно, расположив Vee-объекты перпендикулярно к архитектуре Vee. Для каждого объекта архитектуры Vee существует соответствующий объект Vee, который определяет развитие и исполнение объекта.\n\n\n=== Распределение точек принятия решения ===\nАрхитектурные объекты разрабатываются и интегрируются в архитектуру системы в заранее определённой последовательности в соответствии с лучшими примерами системной инженерии.\nДля упрощения картины только один объект Vee показан пересекающим архитектуру Vee на каждом уровне. Обратите внимание, что последовательность разработки указана сверху вниз, начиная с системного уровня и продолжающаяся последовательно со схемой до нижнего уровня конфигурации составных частей (LCI). Эта последовательность гарантирует, что существуют соответствующие требования, которые сохраняются от начала до конца и которые можно легко отследить.\nКогда образец для разработки и программирования, включающий черновую процедуру проверки, готов быть зафиксированным, последовательность принятия решения по разработке выполняется снизу вверх, чтобы доказать пригодность разработки или программного кода. Точка принятия решения также подтверждает что если окончательное решение будет построено в соответствии с разработанным образцом, требуемая производительность\nбудет достигнута. Эта последовательность гарантирует что если проекты объекта удовлетворяют требованиям принятым на этапе принятия решения по разработке, объекты будут интегрированы в следующий более высокий уровень объекта, будут реализованы как ожидалось и будут отвечать пользовательским требованиям.\n\n\n== Примечания ==",
        "links": [
            "Adaptive software development",
            "CASE",
            "CMMI",
            "Capability Maturity Model",
            "Cleanroom Software Engineering",
            "DSDM",
            "DevOps",
            "Disciplined Agile Delivery",
            "Feature driven development",
            "Function model",
            "GUI-конструктор",
            "IDEF",
            "Microsoft Solutions Framework",
            "Object model",
            "OpenUP",
            "RAD (программирование)",
            "Rational Unified Process",
            "SCRUM",
            "Scaled Agile Framework",
            "Scrum",
            "UML",
            "Unified Process",
            "V-Model",
            "View model",
            "Автоматизация релиза",
            "Автоматизация сборки",
            "Анализ требований",
            "Архитектура программного обеспечения",
            "Аспектно-ориентированное программирование",
            "Бек, Кент",
            "Бережливая разработка программного обеспечения",
            "Боэм, Барри",
            "Брукс, Фредерик",
            "Буч, Гради",
            "Вирт, Никлаус",
            "Гибкая методология разработки",
            "Даль, Оле-Йохан",
            "Дейкстра, Эдсгер Вибе",
            "Демарко, Том",
            "Джеймс Мартин (писатель)",
            "Джексон, Майкл Энтони",
            "Документация на программное обеспечение",
            "Индивидуальный процесс разработки",
            "Инструментальное программное обеспечение",
            "Интегрированная среда разработки",
            "Информационная модель",
            "Итеративная разработка",
            "Йордан, Эдвард",
            "Канбан (разработка)",
            "Каннингем, Уорд",
            "Каскадная модель",
            "Качество программного обеспечения",
            "Кнут, Дональд Эрвин",
            "Командный процесс разработки",
            "Компилятор",
            "Конструирование программного обеспечения",
            "Кэй, Алан Кёртис",
            "Ларман, Крэг",
            "Макконнелл, Стив",
            "Мартин, Роберт (инженер)",
            "Мейер, Бертран",
            "Метамодель (информатика)",
            "Методология программирования",
            "Модель Spotify",
            "Модель данных",
            "Объектно-ориентированное программирование",
            "Отладка программы",
            "Отладчик",
            "Парадигма программирования",
            "Парнас, Дэвид",
            "Предметно-ориентированное проектирование",
            "Программирование",
            "Проектирование программного обеспечения",
            "Профилирование (информатика)",
            "Процесс разработки программного обеспечения",
            "Развёртывание программного обеспечения",
            "Разработка, управляемая моделями",
            "Разработка программного обеспечения",
            "Рамбо, Джеймс",
            "Ройс, Уинстон",
            "Система",
            "Сопровождение программного обеспечения",
            "Спиральная модель",
            "Стадии разработки программного обеспечения",
            "Тестирование программного обеспечения",
            "Уоттс Хамфри",
            "Фаулер, Мартин",
            "Хоар, Чарльз Энтони Ричард",
            "Экстремальное программирование",
            "Якобсон, Ивар"
        ],
        "images": [
            "Файл:Crystal Clear app kedit.svg",
            "Файл:Question book-4.svg",
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "Folding@Home": {
        "title": "Folding@Home",
        "extract": "",
        "links": [
            "Folding@home"
        ],
        "images": []
    },
    "Function Model": {
        "title": "Function Model",
        "extract": "",
        "links": [],
        "images": []
    },
    "Garland Science": {
        "title": "Garland Science",
        "extract": "",
        "links": [],
        "images": []
    },
    "Gemeinsame Normdatei": {
        "title": "Gemeinsame Normdatei",
        "extract": "Gemeinsame Normdatei (GND) — немецкая система классификации и систематизации, предназначенная преимущественно для библиотек. \n\n\n== История ==\nGND запущена в апреле 2012 года Немецкой национальной библиотекой в сотрудничестве с различными библиотечными сетями и включает в себя записи четырёх систем:\n\nPersonennamendatei (PND);\nSchlagwortnormdatei (SWD);\nGemeinsame Körperschaftsdatei (GKD);\nEinheitssachtitel-Datei des Deutschen Musikarchivs (DMA-EST).\nПо состоянию на 5 апреля 2012 года в GND имелось 9 493 860 записей, включая 2 650 000 персоналий.\n\n\n== Ссылки ==\nЭлектронный каталог: OGND\nЭлектронный каталог: DNB-Portal\nÜber das Projekt Gemeinsame Normdatei\n\n\n== Примечания ==\n\n\n== Литература ==\nChristel Hengel-Dittrich. Das Projekt Gemeinsame Normdatei — GND. In: Dialog mit Bibliotheken. Jg. 22, H. 1, S. 36.\nBereitstellung des ersten GND-Grundbestandes (нем.) (19 апреля 2012). Архивировано из оригинала 26 мая 2012 года.",
        "links": [
            "19 апреля",
            "2012 год",
            "Einheitssachtitel-Datei des Deutschen Musikarchivs",
            "Gemeinsame Körperschaftsdatei",
            "Personennamendatei",
            "Schlagwortnormdatei",
            "URL",
            "VIAF",
            "WorldCat",
            "Английский язык",
            "Библиотека",
            "Германия",
            "Классификация",
            "Личность",
            "Немецкая национальная библиотека",
            "Немецкий язык",
            "Систематизация",
            "ФРГ",
            "Электронный каталог"
        ],
        "images": [
            "Файл:Flag of Germany.svg",
            "Файл:Gemeinsame Normdatei 2012 Opera.png",
            "Файл:Logo Gemeinsame Normdatei (GND).svg",
            "Файл:OOjs UI icon edit-ltr-progressive.svg",
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "Http": {
        "title": "Http",
        "extract": "",
        "links": [
            "HTTP"
        ],
        "images": []
    },
    "Ibm": {
        "title": "Ibm",
        "extract": "",
        "links": [],
        "images": []
    },
    "Ibm 704": {
        "title": "Ibm 704",
        "extract": "",
        "links": [],
        "images": []
    },
    "Idef": {
        "title": "Idef",
        "extract": "",
        "links": [],
        "images": []
    },
    "Levy, Steven": {
        "title": "Levy, Steven",
        "extract": "",
        "links": [],
        "images": []
    },
    "Microsoft Solutions Framework": {
        "title": "Microsoft Solutions Framework",
        "extract": "Microsoft Solutions Framework (MSF) — методология разработки программного обеспечения, предложенная корпорацией Microsoft. MSF опирается на практический опыт Microsoft и описывает управление людьми и рабочими процессами в процессе разработки решения.\n\n\n== Введение ==\nВ 1994 году Microsoft выпустила в свет пакет руководств по эффективному проектированию, разработке, внедрению и сопровождению решений, построенных на основе своих технологий. Это представлено в виде двух областей знаний: Microsoft Solutions Framework (MSF) и Microsoft Operations Framework (MOF).\nMicrosoft разработала на базе общих методов MSF методики для прикладного и специализированного применения.\nНаиболее популярные прикладные варианты MSF, разработанные Microsoft: методика внедрения решений в области Управления проектами и  методика управления IT-проектами на базе методологий MSF и Agile.\nВажность прикладных вариантов MSF подчёркивает тот факт, что в «чистом варианте» саму методику MSF в своих IT-проектах компания Microsoft не использует. В проектах Microsoft Consulting Services используется гибридная методология MSF и Agile. Несмотря на внешние существенные различия прикладных вариантов MSF, разработанных экспертами Microsoft, общая база методов MSF для них остается общая и отражает общие методологические подходы к итеративному ведению проектов.\nMSF состоит из двух моделей и трех дисциплин. Они подробно описаны в 5 whitepapers.\nMSF содержит:\n\nмодели:\nмодель проектной группы\nмодель процессов\nдисциплины:\nдисциплина управление проектами\nдисциплина управление рисками\nдисциплина управление подготовкой\n\n\n== Модель проектной группы MSF ==\nМодель проектной группы MSF (MSF Team Model) описывает подход Майкрософт к организации работающего над проектом персонала и его деятельности в целях максимизации успешности проекта. Данная модель определяет ролевые кластеры, их области компетенции и зоны ответственности, а также рекомендации членам проектной группы, позволяющие им успешно осуществить свою миссию по воплощению проекта в жизнь.\nМодель проектной группы MSF разрабатывалась в течение нескольких лет и возникла в результате осмысления недостатков пирамидальной, иерархической структуры традиционных проектных групп.\nВ соответствии с моделью MSF проектные группы строятся как небольшие многопрофильные команды, члены которых распределяют между собой ответственность и дополняют области компетенций друг друга. Это дает возможность четко сфокусировать внимание на нуждах проекта. Проектную группу объединяет единое видение проекта, стремление к воплощению его в жизнь, высокие требования к качеству работы и желание самосовершенствоваться.\nНиже описываются основные принципы, ключевые идеи и испытанные методики MSF в применении к модели проектной группы.\nMSF включает в себя ряд основных принципов. Вот те из них, которые имеют отношение к успешной работе команды:\n\nРаспределение ответственности при фиксации отчетности\nНаделяйте членов команды полномочиями\nКонцентрируйтесь на бизнес-приоритетах\nЕдиное видение проекта\nПроявляйте гибкость — будьте готовы к переменам\nПоощряйте свободное общение\nУспешное использование модели проектной группы MSF основывается на ряде ключевых концепций (key concepts):\n\nКоманда соратников\nСфокусированность на нуждах заказчика\nНацеленность на конечный результат\nУстановка на отсутствие дефектов\nСтремление к самосовершенствованию\nЗаинтересованные команды работают эффективно\nMSF основан на постулате о шести качественных целях, достижение которых определяет успешность проекта. Эти цели обуславливают модель проектной группы. В то время как за успех проекта ответственна вся команда, каждый из её ролевых кластеров, определяемых моделью, ассоциирован с одной из упомянутых шести целей и работает над её достижением.\nВ проектную группу входят такие ролевые кластеры:\n\nуправление программой\nуправление продуктом\nразработка\nтестирование\nуправление релизом\nудовлетворение потребителя\nОни ответственны за различные области компетенции (functional areas) и связанные с ними цели и задачи. Иногда ролевые кластеры называются просто ролями. Но в любом случае суть концепции остается той же — построить основу производственных отношений и связанную с ней модель команды такими, чтобы они были приспосабливаемыми (масштабируемыми) для удовлетворения нужд любого проекта.\nКак уже было сказано выше, проектная группа по MSF состоит из шести ролевых кластеров, каждый из которых отвечает за:\n\nуправление программой (program manager) — разработку архитектуры решения, административные службы;\nразработку (developer) — разработку приложений и инфраструктуры, технологические консультации;\nтестирование (QAE) — планирование, разработку тестов и отчетность по тестам;\nуправление выпуском (release manager) — инфраструктуру, сопровождение, бизнес-процессы, выпуск готового продукта;\nудовлетворение заказчика (user experience) — обучение, эргономику, графический дизайн, техническую поддержку;\nуправление продуктом (product manager) — бизнес-приоритеты, маркетинг, представительство интересов заказчика.\nНаличие шести ролевых кластеров не означает, что количество членов команды должно быть кратным шести — один человек может совмещать несколько ролей и наоборот, ролевой кластер может состоять из нескольких лиц в зависимости от размера проекта, его сложности и профессиональных навыков, требуемых для реализации всех областей компетенции кластера. Минимальный коллектив по MSF может состоять всего из трех человек. Модель не требует назначения отдельного сотрудника на каждый ролевой кластер. Смысл состоит в том, что в команде должны быть представлены все шесть качественных целей. Обычно, выделение как минимум одного человека на каждый ролевой кластер обеспечивает полноценное внимание к интересам каждой из ролей, но это экономически оправданно не для всех проектов. Зачастую члены проектной группы могут объединять роли.\nВ малых проектных группах объединение ролей является необходимым. При этом должны соблюдаться два принципа:\n\nРоль команды разработчиков не может быть объединена ни с какой другой ролью.\nИзбежание сочетания ролей, имеющих предопределенные конфликты интересов.\nКак и в любой другой командной деятельности, подходящая комбинация ролей зависит от самих членов команды, их опыта и профессиональных навыков. На практике совмещение ролей встречается нередко. И если проектная группа производит его обдуманно и управляет связанными с таким объединением рисками, возникающие проблемы будут минимальными.\nMSF не предоставляет конкретных рецептов управления проектами и не содержит объяснений разнообразных методов работы, которые применяют опытные менеджеры. Принципы MSF формируют такой подход к управлению проектами, при котором:\n\nответственность за управление проектом распределенная между лидерами ролевых кластеров внутри команды — каждый член проектной группы отвечает за общий успех проекта и качество создаваемого продукта.\nпрофессиональные менеджеры выступают в качестве консультантов и наставников команды, а не выполняют функции контроля над ней — в эффективно работающей команде каждый её член имеет необходимые полномочия для выполнения своих обязанностей и уверен, что получит от коллег все необходимое.\nКак следует из вышесказанного, одна из характерных особенностей MSF — отсутствие должности менеджера проекта!\nМодель проектной группы MSF предлагает разбиение больших команд (более 10 человек) на малые многопрофильные группы направлений (feature teams). Эти малые коллективы работают параллельно, регулярно синхронизируя свои усилия. Кроме того, когда ролевому кластеру требуется много ресурсов, формируются т. н. функциональные группы (functional teams), которые затем объединяются в ролевые кластеры.\nИспользование ролевых кластеров не подразумевает и не навязывает\nникакой специальной структуры организации или обязательных должностей.\nАдминистративный состав ролей может широко варьироваться в разных организациях и проектных группах. Чаще всего роли распределяются среди различных подразделений одной организации, но иногда часть их отводится сообществу потребителей или внешним по отношению к организации консультантам и партнерам. Ключевым моментом является четкое определение работников, ответственных за каждый ролевой кластер, их функций, ответственности и ожидаемого вклада в конечный результат.\nМодель проектной группы MSF не обеспечивает успех сама по себе. Есть много других факторов, определяющих успех или неудачу проекта, но структура проектной группы, безусловно, вносит существенный вклад.\nПодходящая структура команды является фундаментом успеха, и реализация модели MSF с использованием лежащих в её основе принципов поможет сделать проектные группы более эффективными и, как следствие, более успешными.\n\n\n== Модель процессов MSF ==\nМодель процессов MSF (MSF process model) представляет общую методологию разработки и внедрения IT решений. Особенность этой модели состоит в том, что благодаря своей гибкости и отсутствию жестко навязываемых процедур она может быть применена при разработке весьма широкого круга IT проектов. Эта модель сочетает в себе свойства двух стандартных производственных моделей: каскадной (waterfall) и спиральной (spiral). Модель процессов в MSF 3.0 была дополнена ещё одним инновационным аспектом: она покрывает весь жизненный цикл создания решения, начиная с его отправной точки и заканчивая непосредственно внедрением. Такой подход помогает проектным группам сфокусировать своё внимание на бизнес-отдаче (business value) решения, поскольку эта отдача становится реальной лишь после завершения внедрения и начала использования продукта.\nПроцесс MSF ориентирован на «вехи» (milestones) — ключевые точки проекта, характеризующие достижение в его рамках какого-либо существенного (промежуточного либо конечного) результата. Этот результат может быть оценен и проанализирован, что подразумевает ответы на вопросы: «Пришла ли проектная группа к однозначному пониманию целей и рамок проекта?», «В достаточной ли степени готов план действий?», «Соответствует ли продукт утверждённой спецификации?», «Удовлетворяет ли решение нужды заказчика?» и т. д.\nМодель процессов MSF учитывает постоянные изменения проектных требований. Она исходит из того, что разработка решения должна состоять из коротких циклов, создающих поступательное движение от простейших версий решения к его окончательному виду.\nМодель процессов MSF тесно связана с базовыми принципами MSF, рассмотренными выше. Вообще говоря, тремя особенностями модели процессов MSF являются:\n\nПодход, основанный на фазах и вехах.\nИтеративный подход.\nИнтегрированный подход к созданию и внедрению решений.\nМодель процессов включает такие основные фазы процесса разработки:\n\nВыработка концепции (Envisioning)\nПланирование (Planning)\nРазработка (Developing)\nСтабилизация (Stabilizing)\nВнедрение (Deploying)\nКроме этого существует большое количество промежуточных вех, которые показывают достижение в ходе проекта определенного прогресса и расчленяют большие сегменты работы на меньшие, обозримые участки. Для каждой фазы модели процессов MSF определяет:\n\nчто (какие артефакты) является результатом этой фазы\nнад чем работает каждый из ролевых кластеров на этой фазе\nВ рамках MSF программный код, документация, дизайн, планы и другие рабочие материалы создаются, как правило, итеративными методами. MSF рекомендует начинать разработку решения с построения, тестирования и внедрения его базовой функциональности. Затем к решению добавляются все новые и новые возможности. Такая стратегия именуется стратегией версионирования. Несмотря на то, что для малых проектов может быть достаточным выпуск одной версии, рекомендуется не упускать возможности создания для одного решения ряда версий. С созданием новых версий эволюционирует функциональность решения.\nИтеративный подход к процессу разработки требует использования гибкого способа ведения документации. «Живые» документы (living documents) должны изменяться по мере эволюции проекта вместе с изменениями требований к конечному продукту. В рамках MSF предлагается ряд шаблонов стандартных документов, которые являются артефактами каждой стадии разработки продукта и могут быть использованы для планирования и контроля процесса разработки.\nРешение не представляет бизнес-ценности, пока оно не внедрено. Именно по этой причине модель процессов MSF содержит весь жизненный цикл создания решения, включая его внедрение — вплоть до момента, когда решение начинает давать отдачу.\n\n\n=== Управление рисками ===\nУправление рисками (risk management) — это одна из ключевых дисциплин Microsoft Solutions Framework® (MSF). MSF видит в изменениях и возникающей из-за них неопределенности неотъемлемые части жизненного цикла информационных технологий. Дисциплина управления рисками в MSF (MSF risk management discipline (недоступная ссылка)) отстаивает превентивный подход к работе с рисками в условиях такой неопределенности, непрерывное оценивание рисков и использование информации о рисках в рамках процесса принятия решений на протяжении всего жизненного цикла проекта. Данная дисциплина предлагает принципы, идеи и рекомендации, подкрепленные описанием пошагового процесса для успешного активного управления рисками. Этот процесс включает в себя выявление и анализ рисков; планирование и реализацию стратегий по их профилактике и смягчению возможных последствий; отслеживание состояния рисков и извлечение уроков из обретенного опыта. Девиз MSF — мы не боремся с рисками — мы ими управляем.\nКак уже говорилось выше, в MSF нет роли «менеджер проекта». Деятельность по управлению проектом распределяется между лидерами групп\nи ролевым кластером «Управление программой».\nДля лидеров групп и ролевого кластера «Управление программой» инструментом управления проектом, облегчающим создание планов и календарных графиков, является WBS. Иерархическая структура работ (Work Breakdown Structure — WBS) — это структуризация работ проекта, отражающая его основные результаты и определяющая его рамки. Работа, не описанная в WBS, находится вне границ проекта. В MSF создание WBS является коллективной деятельностью, в которую вовлекаются все ролевые кластеры. Каждая роль ответственна за предоставление детального описания собственной работы.\n\n\n=== Управление подготовкой ===\nУправление подготовкой — это также одна из ключевых дисциплин Microsoft Solutions Framework (MSF). Она посвящена управлению знаниями, профессиональными умениями и способностями, необходимыми для планирования, создания и сопровождения успешных решений. Дисциплина управления подготовкой MSF описывает фундаментальные принципы MSF и дает рекомендации по применению превентивного подхода к управлению знаниями на протяжении всего жизненного цикла информационных технологий. Эта дисциплина также рассматривает планирование процесса управления подготовкой. Будучи подкрепленной испытанными практическими методиками, дисциплина управления подготовкой предоставляет проектным группам и отдельным специалистам базу для осуществления этого процесса.\nСледует отметить, что MSF не навязывает использование других продуктов Microsoft. Например, для организации процесса производства ПО можно использовать MSF и при этом применять инструменты Borland, хотя будущая версия MSF 4.0 будет жестко привязана к Microsoft Team System — новому инструментальному средству Майкрософт для поддержки командной работы.\n\n\n== Версии ==\nПервая версия MSF появилась в 1994 году. Текущая версия — MSF 4.0 была представлена в 2005 году. В данной версии произошло разделение методологии на два направления: MSF for Agile Software Development и MSF for CMMI Process Improvement.\nКроме этого, появилась роль архитектора и поддержка методологии в инструменте — Visual Studio Team System.\n\n\n== Ссылки ==\nСайты и порталы\n\nMicrosoft Solution Framework in Visual Studio 2005 Team System  (англ.)\nMSF Essentials book  (англ.)\nMSF Resources at North Star Analytics  (англ.)\nИнформация по MOF  (англ.)\nИнформация по MSF  (англ.)\nСтатьи\n\nВведение в методологию Microsoft Solutions Framework  (рус.)\nMSF – философия создания IT-решений или голые амбиции лидера  (рус.)",
        "links": [
            "1994 год",
            "Adaptive software development",
            "Borland",
            "CASE",
            "CMMI",
            "Capability Maturity Model",
            "Cleanroom Software Engineering",
            "DSDM",
            "DevOps",
            "Disciplined Agile Delivery",
            "Dual Vee Model",
            "Feature driven development",
            "Function model",
            "GUI-конструктор",
            "IDEF",
            "Microsoft",
            "Microsoft Team System",
            "Object model",
            "OpenUP",
            "RAD (программирование)",
            "Rational Unified Process",
            "SCRUM",
            "Scaled Agile Framework",
            "Scrum",
            "UML",
            "Unified Process",
            "V-Model",
            "View model",
            "Visual Studio Team System",
            "WBS",
            "Work Breakdown Structure",
            "Автоматизация релиза",
            "Автоматизация сборки",
            "Анализ требований",
            "Архитектура программного обеспечения",
            "Аспектно-ориентированное программирование",
            "Бек, Кент",
            "Бережливая разработка программного обеспечения",
            "Боэм, Барри",
            "Брукс, Фредерик",
            "Буч, Гради",
            "Вирт, Никлаус",
            "Гибкая методология разработки",
            "Даль, Оле-Йохан",
            "Дейкстра, Эдсгер Вибе",
            "Демарко, Том",
            "Джеймс Мартин (писатель)",
            "Джексон, Майкл Энтони",
            "Документация на программное обеспечение",
            "Жизненный цикл информационной системы",
            "Индивидуальный процесс разработки",
            "Инструментальное программное обеспечение",
            "Интегрированная среда разработки",
            "Информационная модель",
            "Итеративная разработка",
            "Йордан, Эдвард",
            "Канбан (разработка)",
            "Каннингем, Уорд",
            "Каскадная модель",
            "Качество программного обеспечения",
            "Кнут, Дональд Эрвин",
            "Командный процесс разработки",
            "Компилятор",
            "Конструирование программного обеспечения",
            "Кэй, Алан Кёртис",
            "Ларман, Крэг",
            "Макконнелл, Стив",
            "Мартин, Роберт (инженер)",
            "Мейер, Бертран",
            "Метамодель (информатика)",
            "Методология программирования",
            "Модель Spotify",
            "Модель данных",
            "Объектно-ориентированное программирование",
            "Отладка программы",
            "Отладчик",
            "Парадигма программирования",
            "Парнас, Дэвид",
            "Предметно-ориентированное проектирование",
            "Программирование",
            "Программное обеспечение",
            "Проектирование программного обеспечения",
            "Профилирование (информатика)",
            "Процесс разработки программного обеспечения",
            "Развёртывание программного обеспечения",
            "Разработка, управляемая моделями",
            "Разработка программного обеспечения",
            "Рамбо, Джеймс",
            "Ройс, Уинстон",
            "Сопровождение программного обеспечения",
            "Спиральная модель",
            "Стадии разработки программного обеспечения",
            "Тестирование программного обеспечения",
            "Уоттс Хамфри",
            "Управление подготовкой",
            "Управление проектами",
            "Управление рисками",
            "Фаулер, Мартин",
            "Хоар, Чарльз Энтони Ричард",
            "Экстремальное программирование",
            "Якобсон, Ивар"
        ],
        "images": [
            "Файл:Ambox PR orange.svg",
            "Файл:Emblem-important.svg",
            "Файл:Wikipedia interwiki section gear icon.svg"
        ]
    },
    "Minds And Machines": {
        "title": "Minds And Machines",
        "extract": "",
        "links": [],
        "images": []
    },
    "National Academies Press": {
        "title": "National Academies Press",
        "extract": "",
        "links": [],
        "images": []
    },
    "Object Model": {
        "title": "Object Model",
        "extract": "",
        "links": [],
        "images": []
    },
    "Openup": {
        "title": "Openup",
        "extract": "",
        "links": [],
        "images": []
    }
}